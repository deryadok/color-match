{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["colors","Button","props","message","onClick","className","Label","style","color","text","PlayAgain","point","GameDisplay","secondsLeft","topColor","randomColor","bottomColor","onButtonClick","Game","useState","utils","random","length","setTopColor","setBottomColor","arr","setRandomColor","setPoint","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","useGameState","gameStatus","startNewGame","ColorMatch","gameId","setGameId","keys","min","max","Math","floor","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d6f6d3e.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n// import { render } from '@testing-library/react';\r\n// import { FontAwesomeIcon } from '../node_modules/@fortwesome/react-fontawesome'\r\n// import { faInfoCircle } from '../node_modules/@fortwesome/free-solid-svg-icons' <span><FontAwesomeIcon icon={faInfoCircle}></FontAwesomeIcon></span>\r\n\r\nfunction App() {\r\n  return (\r\n    <ColorMatch></ColorMatch>\r\n  );\r\n}\r\n\r\nconst colors = ['red', 'blue', 'green', 'yellow', 'white', 'pink', 'purple', 'brown', 'coral', 'chocolate', 'cyan', 'gray', 'magenta', 'olive', 'orange'];\r\n\r\nconst Button = (props) => {\r\n\r\n  let button;\r\n\r\n  if(props.message === 'YES')\r\n    button = <button onClick={() => props.onClick(props.message)} className=\"btn btn-outline-success mr-md-2\">EVET</button> \r\n  else\r\n    button = <button onClick={() => props.onClick(props.message)} className=\"btn btn-outline-danger\">HAYIR</button>\r\n\r\n  return(\r\n    button\r\n  );\r\n}\r\n\r\nconst Label = (props) => {\r\n  return (\r\n    <p className=\"label text-uppercase\" style={{color: props.color}}>{props.text}</p>\r\n  );\r\n}\r\n\r\nconst useGameState = () => {\r\n  const [topColor, setTopColor] = useState(colors[utils.random(0,colors.length - 1)]);\r\n  const [bottomColor, setBottomColor] = useState(colors[utils.random(0,colors.length - 1)]);\r\n  const [randomColor, setRandomColor] = useState(utils.arr(topColor, bottomColor));\r\n  const [point, setPoint] = useState(0);\r\n  const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n  useEffect(() => {\r\n    if(secondsLeft > 0) {\r\n     const timerId = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      },1000);\r\n      return () => clearTimeout(timerId);\r\n    }\r\n  });\r\n\r\n  const onButtonClick = (message) => {\r\n    if(message === 'YES' && topColor === randomColor){\r\n      setPoint(point + 10);\r\n      setSecondsLeft(secondsLeft + 1);\r\n    }\r\n    else if(message === 'NO' && topColor !== randomColor){\r\n      setPoint(point + 10);\r\n      setSecondsLeft(secondsLeft + 1);\r\n    }\r\n    else{\r\n      point > 0 ? setPoint(point - 10) : setPoint(0);\r\n      setSecondsLeft(secondsLeft - 2);\r\n    }\r\n    \r\n    setTopColor(colors[utils.random(0,colors.length - 1)]);\r\n    setBottomColor(colors[utils.random(0,colors.length - 1)]);\r\n    setRandomColor(colors[utils.random(0,colors.length - 1)]);\r\n  }\r\n\r\n  const setGameState = () => {\r\n    setTopColor(colors[utils.random(0,colors.length - 1)]);\r\n    setBottomColor(colors[utils.random(0,colors.length - 1)]);\r\n    setRandomColor(colors[utils.random(0,colors.length - 1)]);\r\n    setPoint(0);\r\n    setSecondsLeft(10);\r\n  }\r\n\r\n  return {topColor, bottomColor, randomColor, point, secondsLeft, onButtonClick, setGameState};\r\n}\r\n\r\nconst PlayAgain = (props) => {\r\n  return(\r\n    <div className=\"col-md-12 board text-center\">\r\n      <p className=\"endGame\">Puanınız: {props.point}</p>\r\n      <button onClick={props.onClick} className=\"btn btn-outline-warning replay\">TEKRAR OYNA</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst GameDisplay = (props) => {  \r\n  return(\r\n    <div className=\"col-md-12 board\">        \r\n        <div className=\"d-inline point\">Puan: {props.point}</div>\r\n        <div className=\"d-inline float-right timer\">Süre: {props.secondsLeft}</div>\r\n        <div className=\"game text-center\">\r\n          <p className=\"info\">Yukarıda yazan renk aşağıdaki yazının rengiyle eşleşiyor mu?</p>\r\n          <Label color = {'white'} text={props.topColor}></Label>\r\n          <Label color = {props.randomColor} text={props.bottomColor}></Label>\r\n        </div>       \r\n        <div className=\"mt-md-5 text-center\">             \r\n          <Button message='YES' onClick={props.onButtonClick}></Button>\r\n          <Button message='NO' onClick={props.onButtonClick}></Button>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Game = (props) => {\r\n  const {\r\n    topColor,\r\n    bottomColor,\r\n    randomColor,\r\n    point,\r\n    secondsLeft,\r\n    onButtonClick,\r\n    setGameState\r\n  } = useGameState();\r\n\r\n  const gameStatus = secondsLeft <= 0 ? true : false;    \r\n\r\n  return(\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        {gameStatus ? (<PlayAgain onClick={()=> props.startNewGame(setGameState())} point={point}></PlayAgain>) : \r\n          (<GameDisplay point={point} secondsLeft={secondsLeft} topColor={topColor} bottomColor={bottomColor} randomColor={randomColor} onButtonClick={onButtonClick}></GameDisplay>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ColorMatch = () => {\r\n  const [gameId, setGameId] = useState(1);\r\n  return <Game keys={gameId} startNewGame={() => { setGameId(gameId + 1);}}></Game>\r\n}\r\n\r\nconst utils = {\r\n  //pick a random number between min and max (edges included)\r\n  random: (min, max) => {var rnd = Math.floor(Math.random() * (max - min + 1)) + min; return rnd;},\r\n  //an array that includes top and random color and return one of them\r\n  arr: (topColor, bottomColor) => { var arr = [topColor, bottomColor]; return arr[utils.random(0,1)]; }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}